// This file is auto-generated by @hey-api/openapi-ts

export type TriggerWebhookConfiguration = {
    requiredHeaders?: Array<[
        string,
        string
    ]>;
};

export type TriggerScheduledConfiguration = {
    cron: string;
    timezone: string;
};

export type PurchaseCreditsRequest = {
    /**
     * The amount of credits to purchase (1 credit = $1)
     */
    amount: number;
};

export type AuthMetadata = {
    isPlayground: boolean;
    serversGranted: Array<{
        id: number;
        name: string;
        isEnabled: boolean;
        transportType: string;
        usageCount: number;
    }>;
    user: {
        id: number;
        sub: string;
        tenantId: string;
        firstName: string;
        lastName: string;
        apiKey: string;
        email: string;
        isAdministrator: boolean;
        isServiceAccount: boolean;
        createdAt: string;
        updatedAt: string;
        isSuperAdministrator?: boolean;
    };
    tenant: {
        id: string;
        isMcpAuthorizationApiKeyEnabled: boolean;
        grantUsersInstallServersPolicy: boolean;
        displayName: string;
        isTrial: boolean;
        subscriptionPlan: string;
        subscriptionSeats: number;
        numberOfEnabledUsers?: number;
        freeCredits: number;
        paidCredits: number;
    };
};

export type UserIdentity = {
    tenantId: number;
    externalId: string;
    userId: number;
    type: 'external-oidc' | 'external-saml' | 'native';
    createdAt: string;
    updatedAt: string;
};

export type User = {
    id: number;
    sub: string;
    tenantId: string;
    firstName: string;
    lastName: string;
    email: string;
    isAdministrator: boolean;
    isSuperAdministrator: boolean;
    isDisabled: boolean;
    isServiceAccount: boolean;
    apiKey: string;
    createdAt: string;
    updatedAt: string;
};

export type UserPermission = {
    id: string;
    tenantId: string;
    userId: number;
    serverId: number;
    createdAt: string;
    updatedAt: string;
};

export type TenantMcpServer = {
    id: number;
    slug: string;
    tenantId: string;
    name: string;
    description: string;
    logoUrl?: string;
    authorization: {
        method: 'none' | 'oauth' | 'apikey';
    };
    transportType: 'self' | 'stdio' | 'httpstreaming' | 'sse';
    transportConfig: {
        type: 'httpstreaming';
        url: string;
        headers?: Array<[
            string,
            string
        ]>;
    } | {
        type: 'stdio';
        command: string;
        dockerImage?: string;
        env?: Array<[
            string,
            string
        ]>;
        files?: Array<[
            string,
            string
        ]>;
    } | {
        type: 'sse';
        url: string;
        headers?: Array<[
            string,
            string
        ]>;
    } | {
        type: 'self';
        id: string;
    };
    oauthClientConfiguration: null | {
        clientId: string;
        clientSecret: string;
        clientAuthMethod: 'client_secret_basic' | 'client_secret_post' | 'none' | string;
        scopes: string;
        tokenSet?: {
            accessToken: string;
            accessTokenExpiresAt?: number;
            idToken?: string;
            refreshToken?: string;
        };
    };
    oauthMetadata: null | {
        requiresAuthorization: boolean;
        resource?: {
            id: string;
            availableScopes: Array<string>;
            metadataUrl: string;
        };
        as?: {
            issuer: string;
            authorizeEndpoint: string;
            tokenEndpoint: string;
            registrationEndpoint?: string;
            supportsPKCE: boolean;
            supportedClientAuthMethods: Array<string>;
            supportsDynamicClientRegistration: boolean;
            noDynamicClientRegistrationReason?: string | null;
            serviceDocumentation: string;
            metadataUrl: string;
        };
    };
    isEnabled: boolean;
    createdAt: string;
    updatedAt: string;
};

export type Tenant = {
    id: string;
    displayName: string;
    rootEmail: string | null;
    isDisabled: boolean;
    isMcpAuthorizationApiKeyEnabled: boolean;
    mcpAuthorizationApiKey: string;
    grantPermissionsNewServerPolicy: boolean;
    grantPermissionsNewToolPolicy: boolean;
    grantUsersInstallServersPolicy: boolean;
    stripeCustomerId: string;
    stripeSubscriptionId: string;
    subscriptionPlan: string;
    stripeCachedSubscription: unknown | null;
    subscriptionSeats: number;
    isPlayground: boolean;
    freeCredits: number;
    paidCredits: number;
    upstreamOidcConfiguration: {
        isEnabled: boolean;
        displayName: string;
        issuer: string;
        clientId: string;
        clientSecret: string;
        clientAuthMethod: 'client_secret_basic' | 'client_secret_post';
        scopes: string;
    } | null;
    upstreamSamlConfiguration: {
        isEnabled: boolean;
        displayName: string;
        idpMetadataUrl: string;
        idpMetadataDocument: string;
        entryPoint: string;
        cert: string;
        identifierFormat: string;
        signatureAlgorithm: string;
        emailClaim: string;
        firstNameClaim: string;
        lastNameClaim: string;
    } | null;
    createdAt: string;
    updatedAt: string;
};

export type LlmApi = {
    id: string;
    name: string;
    createdAt: string;
    updatedAt: string;
};

export type LlmModel = {
    id: string;
    name: string;
    llmApiId: 'googleai' | 'openai' | 'xai';
    supportedContextFiles: Array<{
        name: string;
        maxCount: number;
        maxSize: number;
        mime: Array<string>;
    }>;
    supportsChat: boolean;
    tokenInputCostPerMillion: number;
    tokenOutputCostPerMillion: number;
    isEnabled: boolean;
    createdAt: string;
    updatedAt: string;
};

export type Agent = {
    id: string;
    tenantId: string;
    modelId: string;
    llmApiId: string;
    apiKeyId: string | null;
    name: string;
    description: string;
    modelConfiguration: {
        [key: string]: unknown;
    };
    systemMessage: string;
    inputSchema: string;
    outputSchema: string;
    prompt: string;
    isEnabled: boolean;
    createdAt: string;
    updatedAt: string;
};

export type TenantLlmKey = {
    id: string;
    tenantId: string;
    llmApiId: string;
    name: string;
    key: string;
    isEnabled: boolean;
    extra: {
        [key: string]: unknown;
    };
    createdAt: string;
    updatedAt: string;
};

export type AgentContextFile = {
    id: string;
    tenantId: string;
    agentId: string;
    name: string;
    size: number;
    mime: string;
    isEnabled: boolean;
    createdAt: string;
    updatedAt: string;
};

export type AgentRun = {
    id: string;
    tenantId: string;
    agentId: string;
    input: unknown;
    output: {
        type: 'error';
        data: string;
    } | {
        type: 'genkit';
        data: {
            message?: {
                role: 'system' | 'user' | 'model' | 'tool';
                content: Array<{
                    text: string;
                    media?: unknown;
                    toolRequest?: unknown;
                    toolResponse?: unknown;
                    data?: unknown;
                    metadata?: {
                        [key: string]: unknown;
                    };
                    custom?: {
                        [key: string]: unknown;
                    };
                    reasoning?: unknown;
                    resource?: unknown;
                } | {
                    text?: unknown;
                    media: {
                        contentType?: string;
                        url: string;
                    };
                    toolRequest?: unknown;
                    toolResponse?: unknown;
                    data?: unknown;
                    metadata?: {
                        [key: string]: unknown;
                    };
                    custom?: {
                        [key: string]: unknown;
                    };
                    reasoning?: unknown;
                    resource?: unknown;
                }>;
                metadata?: {
                    [key: string]: unknown;
                };
            };
            finishReason?: 'stop' | 'length' | 'blocked' | 'interrupted' | 'other' | 'unknown';
            finishMessage?: string;
            latencyMs?: number;
            usage?: {
                inputTokens?: number;
                outputTokens?: number;
                totalTokens?: number;
                inputCharacters?: number;
                outputCharacters?: number;
                inputImages?: number;
                outputImages?: number;
                inputVideos?: number;
                outputVideos?: number;
                inputAudioFiles?: number;
                outputAudioFiles?: number;
                custom?: {
                    [key: string]: number;
                };
                thoughtsTokens?: number;
                cachedContentTokens?: number;
            };
            custom: unknown;
            raw: unknown;
            request?: {
                messages: Array<{
                    role: 'system' | 'user' | 'model' | 'tool';
                    content: Array<{
                        text: string;
                        media?: unknown;
                        toolRequest?: unknown;
                        toolResponse?: unknown;
                        data?: unknown;
                        metadata?: {
                            [key: string]: unknown;
                        };
                        custom?: {
                            [key: string]: unknown;
                        };
                        reasoning?: unknown;
                        resource?: unknown;
                    } | {
                        text?: unknown;
                        media: {
                            contentType?: string;
                            url: string;
                        };
                        toolRequest?: unknown;
                        toolResponse?: unknown;
                        data?: unknown;
                        metadata?: {
                            [key: string]: unknown;
                        };
                        custom?: {
                            [key: string]: unknown;
                        };
                        reasoning?: unknown;
                        resource?: unknown;
                    }>;
                    metadata?: {
                        [key: string]: unknown;
                    };
                }>;
                config?: unknown;
                tools?: Array<{
                    name: string;
                    description: string;
                    inputSchema?: {
                        [key: string]: unknown;
                    } | null;
                    outputSchema?: {
                        [key: string]: unknown;
                    } | null;
                    /**
                     * additional metadata for this tool definition
                     */
                    metadata?: {
                        [key: string]: unknown;
                    };
                }>;
                toolChoice?: 'auto' | 'required' | 'none';
                output?: {
                    format?: string;
                    schema?: {
                        [key: string]: unknown;
                    };
                    constrained?: boolean;
                    contentType?: string;
                };
                docs?: Array<{
                    content: Array<{
                        text: string;
                        media?: unknown;
                        toolRequest?: unknown;
                        toolResponse?: unknown;
                        data?: unknown;
                        metadata?: {
                            [key: string]: unknown;
                        };
                        custom?: {
                            [key: string]: unknown;
                        };
                        reasoning?: unknown;
                        resource?: unknown;
                    } | {
                        text?: unknown;
                        media: {
                            contentType?: string;
                            url: string;
                        };
                        toolRequest?: unknown;
                        toolResponse?: unknown;
                        data?: unknown;
                        metadata?: {
                            [key: string]: unknown;
                        };
                        custom?: {
                            [key: string]: unknown;
                        };
                        reasoning?: unknown;
                        resource?: unknown;
                    }>;
                    metadata?: {
                        [key: string]: unknown;
                    };
                }>;
                candidates?: number;
            };
            operation?: {
                action?: string;
                id: string;
                done?: boolean;
                output?: unknown;
                error?: {
                    message: string;
                    [key: string]: unknown | string;
                };
                metadata?: {
                    [key: string]: unknown;
                };
            };
            candidates?: Array<{
                index: number;
                message: {
                    role: 'system' | 'user' | 'model' | 'tool';
                    content: Array<{
                        text: string;
                        media?: unknown;
                        toolRequest?: unknown;
                        toolResponse?: unknown;
                        data?: unknown;
                        metadata?: {
                            [key: string]: unknown;
                        };
                        custom?: {
                            [key: string]: unknown;
                        };
                        reasoning?: unknown;
                        resource?: unknown;
                    } | {
                        text?: unknown;
                        media: {
                            contentType?: string;
                            url: string;
                        };
                        toolRequest?: unknown;
                        toolResponse?: unknown;
                        data?: unknown;
                        metadata?: {
                            [key: string]: unknown;
                        };
                        custom?: {
                            [key: string]: unknown;
                        };
                        reasoning?: unknown;
                        resource?: unknown;
                    }>;
                    metadata?: {
                        [key: string]: unknown;
                    };
                };
                usage?: {
                    inputTokens?: number;
                    outputTokens?: number;
                    totalTokens?: number;
                    inputCharacters?: number;
                    outputCharacters?: number;
                    inputImages?: number;
                    outputImages?: number;
                    inputVideos?: number;
                    outputVideos?: number;
                    inputAudioFiles?: number;
                    outputAudioFiles?: number;
                    custom?: {
                        [key: string]: number;
                    };
                    thoughtsTokens?: number;
                    cachedContentTokens?: number;
                };
                finishReason: 'stop' | 'length' | 'blocked' | 'interrupted' | 'other' | 'unknown';
                finishMessage?: string;
                custom: unknown;
            }>;
        };
    };
    outcome: 'unknown' | 'success' | 'failure';
    createdAt: string;
    updatedAt: string;
};

export type TenantUsage = {
    id: number;
    tenantId: string | null;
    type: 'AgentRun' | 'FreeCredit' | 'PaidCredit' | 'McpToolCall';
    amount: number;
    meta: {
        [key: string]: unknown;
    };
    createdAt: string;
    updatedAt: string;
};

export type AgentRunToolCall = {
    id: string;
    tenantId: string;
    agentId: string;
    toolName: string;
    input: {
        [key: string]: unknown;
    };
    output: {
        [key: string]: unknown;
    } | null;
    outcome: 'success' | 'failure' | 'unknown';
    createdAt: string;
    updatedAt: string;
};

export type Trigger = {
    id: string;
    tenantId: string;
    name: string;
    type: 'webhook' | 'scheduled';
    configuration: TriggerWebhookConfigurationOutput | TriggerScheduledConfigurationOutput;
    isEnabled: boolean;
    createdAt: string;
    updatedAt: string;
};

export type TriggerTarget = {
    lastInvoked: string | null;
    agent: Agent;
};

export type TriggerInvocation = {
    id: string;
    tenantId: string;
    triggerId: string;
    agentId: string;
    runId: string | null;
    outcome: 'skipped' | 'invoked';
    meta: {
        [key: string]: unknown;
    };
    createdAt: string;
    updatedAt: string;
};

export type UsageAggregationResponse = {
    stats: Array<{
        name: string;
        values: Array<{
            date: string;
            total: number;
        }>;
    }>;
};

export type TriggerWebhookConfigurationOutput = {
    requiredHeaders?: Array<[
        string,
        string
    ]>;
};

export type TriggerScheduledConfigurationOutput = {
    cron: string;
    timezone: string;
};

export type PostAuthNativeLoginData = {
    body?: {
        email: string;
        password: string;
        [key: string]: unknown | string;
    };
    path?: never;
    query?: never;
    url: '/auth/native-login';
};

export type PostAuthNativeLoginResponses = {
    /**
     * Successful response
     */
    200: {
        success: boolean;
        user: {
            id: number;
            email: string;
            firstName: string;
            lastName: string;
            isAdministrator: boolean;
            [key: string]: unknown | number | string | boolean;
        };
    };
};

export type PostAuthNativeLoginResponse = PostAuthNativeLoginResponses[keyof PostAuthNativeLoginResponses];

export type GetAuthMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/me';
};

export type GetAuthMeResponses = {
    /**
     * Successful response
     */
    200: AuthMetadata;
};

export type GetAuthMeResponse = GetAuthMeResponses[keyof GetAuthMeResponses];

export type PostUsersRequestSetPasswordData = {
    body?: never;
    path?: never;
    query: {
        email: string;
    };
    url: '/users/request-set-password';
};

export type PostUsersRequestSetPasswordResponses = {
    /**
     * Successful response
     */
    200: {
        [key: string]: never;
    };
};

export type PostUsersRequestSetPasswordResponse = PostUsersRequestSetPasswordResponses[keyof PostUsersRequestSetPasswordResponses];

export type PostUsersByUserSubSetPasswordData = {
    body?: {
        token: string;
        password: string;
    };
    path: {
        userSub: string;
    };
    query?: never;
    url: '/users/{userSub}/set-password';
};

export type PostUsersByUserSubSetPasswordResponses = {
    /**
     * Successful response
     */
    200: {
        [key: string]: never;
    };
};

export type PostUsersByUserSubSetPasswordResponse = PostUsersByUserSubSetPasswordResponses[keyof PostUsersByUserSubSetPasswordResponses];

export type GetUsersMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type GetUsersMeResponses = {
    /**
     * Successful response
     */
    200: {
        user: {
            id: number;
            sub: string;
            tenantId: string;
            firstName: string;
            lastName: string;
            email: string;
            isAdministrator: boolean;
            isDisabled: boolean;
            isServiceAccount: boolean;
            apiKey: string;
            createdAt: string;
            updatedAt: string;
        };
        identities: Array<UserIdentity>;
    };
};

export type GetUsersMeResponse = GetUsersMeResponses[keyof GetUsersMeResponses];

export type GetUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users';
};

export type GetUsersResponses = {
    /**
     * Successful response
     */
    200: {
        users: Array<User>;
    };
};

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses];

export type PostUsersData = {
    body?: {
        email: string;
        firstName: string;
        lastName: string;
        isAdministrator: boolean;
        isServiceAccount: boolean;
    };
    path?: never;
    query?: never;
    url: '/users';
};

export type PostUsersResponses = {
    /**
     * Successful response
     */
    200: {
        user: User;
    };
};

export type PostUsersResponse = PostUsersResponses[keyof PostUsersResponses];

export type DeleteUsersByUserIdData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: '/users/{userId}';
};

export type DeleteUsersByUserIdResponses = {
    /**
     * Successful response
     */
    200: {
        [key: string]: never;
    };
};

export type DeleteUsersByUserIdResponse = DeleteUsersByUserIdResponses[keyof DeleteUsersByUserIdResponses];

export type GetUsersByUserIdData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: '/users/{userId}';
};

export type GetUsersByUserIdResponses = {
    /**
     * Successful response
     */
    200: {
        user: User;
    };
};

export type GetUsersByUserIdResponse = GetUsersByUserIdResponses[keyof GetUsersByUserIdResponses];

export type PutUsersByUserIdData = {
    body?: {
        email: string;
        firstName: string;
        lastName: string;
        isDisabled: boolean;
        isAdministrator: boolean;
    };
    path: {
        userId: string;
    };
    query?: never;
    url: '/users/{userId}';
};

export type PutUsersByUserIdResponses = {
    /**
     * Successful response
     */
    200: {
        user: User;
    };
};

export type PutUsersByUserIdResponse = PutUsersByUserIdResponses[keyof PutUsersByUserIdResponses];

export type GetUsersByUserIdPermissionsData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: '/users/{userId}/permissions';
};

export type GetUsersByUserIdPermissionsResponses = {
    /**
     * Successful response
     */
    200: {
        permissions: Array<UserPermission>;
    };
};

export type GetUsersByUserIdPermissionsResponse = GetUsersByUserIdPermissionsResponses[keyof GetUsersByUserIdPermissionsResponses];

export type PostUsersByUserIdPermissionsData = {
    body?: {
        serverId: number;
    };
    path: {
        userId: string;
    };
    query?: never;
    url: '/users/{userId}/permissions';
};

export type PostUsersByUserIdPermissionsResponses = {
    /**
     * Successful response
     */
    200: {
        permission: UserPermission;
    };
};

export type PostUsersByUserIdPermissionsResponse = PostUsersByUserIdPermissionsResponses[keyof PostUsersByUserIdPermissionsResponses];

export type DeleteUsersByUserIdPermissionsByServerIdData = {
    body?: never;
    path: {
        userId: string;
        serverId: string;
    };
    query?: never;
    url: '/users/{userId}/permissions/{serverId}';
};

export type DeleteUsersByUserIdPermissionsByServerIdResponses = {
    /**
     * Successful response
     */
    200: {
        [key: string]: never;
    };
};

export type DeleteUsersByUserIdPermissionsByServerIdResponse = DeleteUsersByUserIdPermissionsByServerIdResponses[keyof DeleteUsersByUserIdPermissionsByServerIdResponses];

export type GetMcpServersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/mcp-servers';
};

export type GetMcpServersResponses = {
    /**
     * Successful response
     */
    200: {
        servers: Array<{
            id: number;
            slug: string;
            tenantId: string;
            name: string;
            description: string;
            logoUrl?: string;
            authorization: {
                method: 'none' | 'oauth' | 'apikey';
            };
            transportType: 'self' | 'stdio' | 'httpstreaming' | 'sse';
            transportConfig: {
                type: 'httpstreaming';
                url: string;
                headers?: Array<[
                    string,
                    string
                ]>;
            } | {
                type: 'stdio';
                command: string;
                dockerImage?: string;
                env?: Array<[
                    string,
                    string
                ]>;
                files?: Array<[
                    string,
                    string
                ]>;
            } | {
                type: 'sse';
                url: string;
                headers?: Array<[
                    string,
                    string
                ]>;
            } | {
                type: 'self';
                id: string;
            };
            oauthClientConfiguration: null | {
                clientId: string;
                clientSecret: string;
                clientAuthMethod: 'client_secret_basic' | 'client_secret_post' | 'none' | string;
                scopes: string;
                tokenSet?: {
                    accessToken: string;
                    accessTokenExpiresAt?: number;
                    idToken?: string;
                    refreshToken?: string;
                };
            };
            oauthMetadata: null | {
                requiresAuthorization: boolean;
                resource?: {
                    id: string;
                    availableScopes: Array<string>;
                    metadataUrl: string;
                };
                as?: {
                    issuer: string;
                    authorizeEndpoint: string;
                    tokenEndpoint: string;
                    registrationEndpoint?: string;
                    supportsPKCE: boolean;
                    supportedClientAuthMethods: Array<string>;
                    supportsDynamicClientRegistration: boolean;
                    noDynamicClientRegistrationReason?: string | null;
                    serviceDocumentation: string;
                    metadataUrl: string;
                };
            };
            isEnabled: boolean;
            createdAt: string;
            updatedAt: string;
            usage: {
                lastSevenDays: number;
            };
        }>;
    };
};

export type GetMcpServersResponse = GetMcpServersResponses[keyof GetMcpServersResponses];

export type PostMcpServersData = {
    body?: {
        name: string;
        slug: string;
        description?: string;
        logoUrl?: string;
        /**
         * The URL of the remote MCP server
         */
        url?: string;
        authorization: {
            method: 'none' | 'oauth' | 'apikey';
        };
        transportType: 'self' | 'stdio' | 'httpstreaming' | 'sse';
        transportConfig: {
            type: 'httpstreaming';
            url: string;
            headers?: Array<[
                string,
                string
            ]>;
        } | {
            type: 'stdio';
            command: string;
            dockerImage?: string;
            env?: Array<[
                string,
                string
            ]>;
            files?: Array<[
                string,
                string
            ]>;
        } | {
            type: 'sse';
            url: string;
            headers?: Array<[
                string,
                string
            ]>;
        };
    };
    path?: never;
    query?: never;
    url: '/mcp-servers';
};

export type PostMcpServersResponses = {
    /**
     * Successful response
     */
    200: {
        server: TenantMcpServer;
    };
};

export type PostMcpServersResponse = PostMcpServersResponses[keyof PostMcpServersResponses];

export type DeleteMcpServersByServerIdData = {
    body?: never;
    path: {
        serverId: string;
    };
    query?: never;
    url: '/mcp-servers/{serverId}';
};

export type DeleteMcpServersByServerIdResponses = {
    /**
     * Successful response
     */
    200: {
        server: TenantMcpServer;
    };
};

export type DeleteMcpServersByServerIdResponse = DeleteMcpServersByServerIdResponses[keyof DeleteMcpServersByServerIdResponses];

export type GetMcpServersByServerIdData = {
    body?: never;
    path: {
        serverId: string;
    };
    query?: never;
    url: '/mcp-servers/{serverId}';
};

export type GetMcpServersByServerIdResponses = {
    /**
     * Successful response
     */
    200: {
        server: TenantMcpServer;
    };
};

export type GetMcpServersByServerIdResponse = GetMcpServersByServerIdResponses[keyof GetMcpServersByServerIdResponses];

export type PutMcpServersByServerIdData = {
    body?: {
        name: string;
        slug: string;
        description?: string;
        logoUrl?: string;
        /**
         * The URL of the remote MCP server
         */
        url?: string;
        authorization: {
            method: 'none' | 'oauth' | 'apikey';
        };
        transportConfig: {
            type: 'httpstreaming';
            url: string;
            headers?: Array<[
                string,
                string
            ]>;
        } | {
            type: 'stdio';
            command: string;
            dockerImage?: string;
            env?: Array<[
                string,
                string
            ]>;
            files?: Array<[
                string,
                string
            ]>;
        } | {
            type: 'sse';
            url: string;
            headers?: Array<[
                string,
                string
            ]>;
        };
    };
    path: {
        serverId: string;
    };
    query?: never;
    url: '/mcp-servers/{serverId}';
};

export type PutMcpServersByServerIdResponses = {
    /**
     * Successful response
     */
    200: {
        server: TenantMcpServer;
    };
};

export type PutMcpServersByServerIdResponse = PutMcpServersByServerIdResponses[keyof PutMcpServersByServerIdResponses];

export type GetMcpServersByServerIdRunningStatusData = {
    body?: never;
    path: {
        serverId: string;
    };
    query?: never;
    url: '/mcp-servers/{serverId}/running-status';
};

export type GetMcpServersByServerIdRunningStatusResponses = {
    /**
     * Successful response
     */
    200: {
        isRunning: boolean;
    };
};

export type GetMcpServersByServerIdRunningStatusResponse = GetMcpServersByServerIdRunningStatusResponses[keyof GetMcpServersByServerIdRunningStatusResponses];

export type PostMcpServersByServerIdStartData = {
    body?: never;
    path: {
        serverId: string;
    };
    query?: never;
    url: '/mcp-servers/{serverId}/start';
};

export type PostMcpServersByServerIdStartResponses = {
    /**
     * Successful response
     */
    200: {
        success: boolean;
        /**
         * Detailed information about why the server could not be started.
         */
        detail?: string;
    };
};

export type PostMcpServersByServerIdStartResponse = PostMcpServersByServerIdStartResponses[keyof PostMcpServersByServerIdStartResponses];

export type PutMcpServersByServerIdIsEnabledData = {
    body?: {
        value: boolean;
    };
    path: {
        serverId: string;
    };
    query?: never;
    url: '/mcp-servers/{serverId}/isEnabled';
};

export type PutMcpServersByServerIdIsEnabledResponses = {
    /**
     * Successful response
     */
    200: {
        server: TenantMcpServer;
    };
};

export type PutMcpServersByServerIdIsEnabledResponse = PutMcpServersByServerIdIsEnabledResponses[keyof PutMcpServersByServerIdIsEnabledResponses];

export type GetMcpServersByServerIdToolsData = {
    body?: never;
    path: {
        serverId: string;
    };
    query?: never;
    url: '/mcp-servers/{serverId}/tools';
};

export type GetMcpServersByServerIdToolsResponses = {
    /**
     * Successful response
     */
    200: {
        tools: Array<{
            tenantId: string;
            serverId: number;
            toolName: string;
            schema: {
                [key: string]: never;
            };
            isEnabled: boolean;
            createdAt: number;
            updatedAt: number;
        }>;
    };
};

export type GetMcpServersByServerIdToolsResponse = GetMcpServersByServerIdToolsResponses[keyof GetMcpServersByServerIdToolsResponses];

export type GetMcpServersByServerIdToolsByToolNameData = {
    body?: never;
    path: {
        serverId: string;
        toolName: string;
    };
    query?: never;
    url: '/mcp-servers/{serverId}/tools/{toolName}';
};

export type GetMcpServersByServerIdToolsByToolNameResponses = {
    /**
     * Successful response
     */
    200: {
        tool: {
            tenantId: string;
            serverId: number;
            toolName: string;
            schema: {
                [key: string]: never;
            };
            isEnabled: boolean;
            createdAt: number;
            updatedAt: number;
        };
    };
};

export type GetMcpServersByServerIdToolsByToolNameResponse = GetMcpServersByServerIdToolsByToolNameResponses[keyof GetMcpServersByServerIdToolsByToolNameResponses];

export type PutMcpServersByServerIdAllToolsIsEnabledData = {
    body?: {
        value: boolean;
    };
    path: {
        serverId: string;
    };
    query?: never;
    url: '/mcp-servers/{serverId}/all-tools-isEnabled';
};

export type PutMcpServersByServerIdAllToolsIsEnabledResponses = {
    /**
     * Successful response
     */
    200: {
        success: boolean;
        message: string;
    };
};

export type PutMcpServersByServerIdAllToolsIsEnabledResponse = PutMcpServersByServerIdAllToolsIsEnabledResponses[keyof PutMcpServersByServerIdAllToolsIsEnabledResponses];

export type PutMcpServersByServerIdToolsByToolNameIsEnabledData = {
    body?: {
        value: boolean;
    };
    path: {
        serverId: string;
        toolName: string;
    };
    query?: never;
    url: '/mcp-servers/{serverId}/tools/{toolName}/isEnabled';
};

export type PutMcpServersByServerIdToolsByToolNameIsEnabledResponses = {
    /**
     * Successful response
     */
    200: {
        success: boolean;
        message: string;
    };
};

export type PutMcpServersByServerIdToolsByToolNameIsEnabledResponse = PutMcpServersByServerIdToolsByToolNameIsEnabledResponses[keyof PutMcpServersByServerIdToolsByToolNameIsEnabledResponses];

export type PostMcpServersByServerIdToolsByToolNameCallData = {
    body?: {
        args: {
            [key: string]: unknown;
        };
    };
    path: {
        serverId: string;
        toolName: string;
    };
    query?: never;
    url: '/mcp-servers/{serverId}/tools/{toolName}/call';
};

export type PostMcpServersByServerIdToolsByToolNameCallResponses = {
    /**
     * Successful response
     */
    200: {
        tool: {
            tenantId: string;
            serverId: number;
            toolName: string;
            schema: {
                [key: string]: never;
            };
            isEnabled: boolean;
            createdAt: number;
            updatedAt: number;
        };
    };
};

export type PostMcpServersByServerIdToolsByToolNameCallResponse = PostMcpServersByServerIdToolsByToolNameCallResponses[keyof PostMcpServersByServerIdToolsByToolNameCallResponses];

export type PostSignupData = {
    body?: {
        tenantDisplayName: string;
        tenantSlug: string;
        email: string;
        firstName?: string;
        lastName?: string;
        recaptchaToken?: string;
    };
    path?: never;
    query?: never;
    url: '/signup';
};

export type PostSignupResponses = {
    /**
     * Successful response
     */
    200: {
        [key: string]: never;
    };
};

export type PostSignupResponse = PostSignupResponses[keyof PostSignupResponses];

export type GetTenantsByTenantIdSigninMethodsData = {
    body?: never;
    path: {
        tenantId: string;
    };
    query?: never;
    url: '/tenants/{tenantId}/signin-methods';
};

export type GetTenantsByTenantIdSigninMethodsResponses = {
    /**
     * Successful response
     */
    200: {
        displayName: string;
        native: boolean;
        external: boolean;
    };
};

export type GetTenantsByTenantIdSigninMethodsResponse = GetTenantsByTenantIdSigninMethodsResponses[keyof GetTenantsByTenantIdSigninMethodsResponses];

export type GetTenantsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/tenants';
};

export type GetTenantsResponses = {
    /**
     * Successful response
     */
    200: {
        tenants: Array<Tenant>;
    };
};

export type GetTenantsResponse = GetTenantsResponses[keyof GetTenantsResponses];

export type DeleteTenantsByTenantIdData = {
    body?: never;
    path: {
        tenantId: string;
    };
    query?: never;
    url: '/tenants/{tenantId}';
};

export type DeleteTenantsByTenantIdResponses = {
    /**
     * Successful response
     */
    200: {
        [key: string]: never;
    };
};

export type DeleteTenantsByTenantIdResponse = DeleteTenantsByTenantIdResponses[keyof DeleteTenantsByTenantIdResponses];

export type GetTenantsByTenantIdData = {
    body?: never;
    path: {
        tenantId: string;
    };
    query?: never;
    url: '/tenants/{tenantId}';
};

export type GetTenantsByTenantIdResponses = {
    /**
     * Successful response
     */
    200: {
        tenant: Tenant;
    };
};

export type GetTenantsByTenantIdResponse = GetTenantsByTenantIdResponses[keyof GetTenantsByTenantIdResponses];

export type PutTenantsByTenantIdData = {
    body?: {
        displayName?: string;
        upstreamOidcConfiguration?: {
            isEnabled: boolean;
            displayName: string;
            issuer: string;
            clientId: string;
            clientSecret: string;
            clientAuthMethod: 'client_secret_basic' | 'client_secret_post';
            scopes: string;
        } | null;
        upstreamSamlConfiguration?: {
            isEnabled: boolean;
            displayName: string;
            idpMetadataUrl?: string;
            idpMetadataDocument: string;
            entryPoint: string;
            cert: string;
            identifierFormat: string;
            signatureAlgorithm: string;
            emailClaim: string;
            firstNameClaim: string;
            lastNameClaim: string;
        } | null;
        isMcpAuthorizationApiKeyEnabled?: boolean;
        grantPermissionsNewServerPolicy?: boolean;
        grantPermissionsNewToolPolicy?: boolean;
        grantUsersInstallServersPolicy?: boolean;
    };
    path: {
        tenantId: string;
    };
    query?: never;
    url: '/tenants/{tenantId}';
};

export type PutTenantsByTenantIdResponses = {
    /**
     * Successful response
     */
    200: {
        tenant: Tenant;
    };
};

export type PutTenantsByTenantIdResponse = PutTenantsByTenantIdResponses[keyof PutTenantsByTenantIdResponses];

export type GetTenantsByTenantIdSubscriptionData = {
    body?: never;
    path: {
        tenantId: string;
    };
    query?: never;
    url: '/tenants/{tenantId}/subscription';
};

export type GetTenantsByTenantIdSubscriptionResponses = {
    /**
     * Successful response
     */
    200: {
        subscriptionPlan: string;
        subscriptionSeats: number;
        subscription: {
            trialEndsAt: string | null;
            status: string;
            currentPeriodEnd: string;
            paymentType?: string | null;
            cancelsAt: string | null;
            perSeatAmount: number;
            currency: string;
            card: {
                valid: boolean;
                brand: string;
                last4: string;
                expiresYear: number;
                expiresMonth: number;
            } | null;
        } | null;
    };
};

export type GetTenantsByTenantIdSubscriptionResponse = GetTenantsByTenantIdSubscriptionResponses[keyof GetTenantsByTenantIdSubscriptionResponses];

export type PutTenantsByTenantIdIsMcpAuthorizationApiKeyEnabledData = {
    body?: {
        isEnabled: boolean;
    };
    path: {
        tenantId: string;
    };
    query?: never;
    url: '/tenants/{tenantId}/is-mcp-authorization-api-key-enabled';
};

export type PutTenantsByTenantIdIsMcpAuthorizationApiKeyEnabledResponses = {
    /**
     * Successful response
     */
    200: {
        isEnabled: boolean;
    };
};

export type PutTenantsByTenantIdIsMcpAuthorizationApiKeyEnabledResponse = PutTenantsByTenantIdIsMcpAuthorizationApiKeyEnabledResponses[keyof PutTenantsByTenantIdIsMcpAuthorizationApiKeyEnabledResponses];

export type GetTenantsByTenantIdDiscoverSamlMetadataData = {
    body?: never;
    path: {
        tenantId: string;
    };
    query: {
        url: string;
    };
    url: '/tenants/{tenantId}/discover-saml-metadata';
};

export type GetTenantsByTenantIdDiscoverSamlMetadataResponses = {
    /**
     * Successful response
     */
    200: string;
};

export type GetTenantsByTenantIdDiscoverSamlMetadataResponse = GetTenantsByTenantIdDiscoverSamlMetadataResponses[keyof GetTenantsByTenantIdDiscoverSamlMetadataResponses];

export type GetTenantSamlMetadataData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/tenant-saml-metadata';
};

export type GetTenantSamlMetadataResponses = {
    /**
     * Successful response
     */
    200: string;
};

export type GetTenantSamlMetadataResponse = GetTenantSamlMetadataResponses[keyof GetTenantSamlMetadataResponses];

export type GetQuotaAndUsageData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/quota-and-usage';
};

export type GetQuotaAndUsageResponses = {
    /**
     * Successful response
     */
    200: {
        quotas: {
            agentRuns: {
                quota: number;
                current: number;
                remaining: number;
                periodUnit: 'hour' | 'day' | 'week' | 'month';
                periodEnd: string;
                periodStart: string;
            };
            agents: {
                quota: number;
                current: number;
                remaining: number;
            };
            accounts: {
                quota: number;
                current: number;
                remaining: number;
            };
            mcpServers: {
                quota: number;
                current: number;
                remaining: number;
            };
        };
    };
};

export type GetQuotaAndUsageResponse = GetQuotaAndUsageResponses[keyof GetQuotaAndUsageResponses];

export type GetAgentsLlmApisData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/agents/llm-apis';
};

export type GetAgentsLlmApisResponses = {
    /**
     * Successful response
     */
    200: {
        apis: Array<LlmApi>;
    };
};

export type GetAgentsLlmApisResponse = GetAgentsLlmApisResponses[keyof GetAgentsLlmApisResponses];

export type GetAgentsLlmModelsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/agents/llm-models';
};

export type GetAgentsLlmModelsResponses = {
    /**
     * Successful response
     */
    200: {
        models: Array<LlmModel>;
    };
};

export type GetAgentsLlmModelsResponse = GetAgentsLlmModelsResponses[keyof GetAgentsLlmModelsResponses];

export type GetAgentsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/agents';
};

export type GetAgentsResponses = {
    /**
     * Successful response
     */
    200: {
        agents: Array<Agent>;
    };
};

export type GetAgentsResponse = GetAgentsResponses[keyof GetAgentsResponses];

export type PostAgentsData = {
    body?: {
        modelId: string;
        llmApiId: string;
        apiKeyId: string | null;
        name: string;
        description: string;
        modelConfiguration: {
            [key: string]: unknown;
        };
        systemMessage: string;
        prompt: string;
        isEnabled: boolean;
        inputSchema: string;
        outputSchema: string;
    };
    path?: never;
    query?: never;
    url: '/agents';
};

export type PostAgentsResponses = {
    /**
     * Successful response
     */
    200: {
        agent: Agent;
        model: LlmModel;
        key: TenantLlmKey | null;
        api: LlmApi;
        mcpServers: Array<TenantMcpServer>;
        files: Array<AgentContextFile>;
    };
};

export type PostAgentsResponse = PostAgentsResponses[keyof PostAgentsResponses];

export type DeleteAgentsByAgentIdData = {
    body?: never;
    path: {
        agentId: string;
    };
    query?: never;
    url: '/agents/{agentId}';
};

export type DeleteAgentsByAgentIdResponses = {
    /**
     * Successful response
     */
    200: {
        [key: string]: never;
    };
};

export type DeleteAgentsByAgentIdResponse = DeleteAgentsByAgentIdResponses[keyof DeleteAgentsByAgentIdResponses];

export type GetAgentsByAgentIdData = {
    body?: never;
    path: {
        agentId: string;
    };
    query?: never;
    url: '/agents/{agentId}';
};

export type GetAgentsByAgentIdResponses = {
    /**
     * Successful response
     */
    200: {
        agent: Agent;
        model: LlmModel;
        key: TenantLlmKey | null;
        api: LlmApi;
        mcpServers: Array<TenantMcpServer>;
        files: Array<AgentContextFile>;
    };
};

export type GetAgentsByAgentIdResponse = GetAgentsByAgentIdResponses[keyof GetAgentsByAgentIdResponses];

export type PutAgentsByAgentIdData = {
    body?: {
        apiKeyId: string | null;
        name: string;
        description: string;
        modelConfiguration: {
            [key: string]: unknown;
        };
        systemMessage: string;
        prompt: string;
        isEnabled: boolean;
        inputSchema: string;
        outputSchema: string;
    };
    path: {
        agentId: string;
    };
    query?: never;
    url: '/agents/{agentId}';
};

export type PutAgentsByAgentIdResponses = {
    /**
     * Successful response
     */
    200: {
        agent: Agent;
        model: LlmModel;
        key: TenantLlmKey | null;
        api: LlmApi;
        mcpServers: Array<TenantMcpServer>;
        files: Array<AgentContextFile>;
    };
};

export type PutAgentsByAgentIdResponse = PutAgentsByAgentIdResponses[keyof PutAgentsByAgentIdResponses];

export type PutAgentsByAgentIdEnabledData = {
    body?: {
        isEnabled: boolean;
    };
    path: {
        agentId: string;
    };
    query?: never;
    url: '/agents/{agentId}/enabled';
};

export type PutAgentsByAgentIdEnabledResponses = {
    /**
     * Successful response
     */
    200: {
        isEnabled: boolean;
    };
};

export type PutAgentsByAgentIdEnabledResponse = PutAgentsByAgentIdEnabledResponses[keyof PutAgentsByAgentIdEnabledResponses];

export type PostAgentsByAgentIdChatData = {
    body?: never;
    path: {
        agentId: string;
    };
    query?: never;
    url: '/agents/{agentId}/chat';
};

export type PostAgentsByAgentIdChatResponses = {
    /**
     * Successful response
     */
    200: {
        id: string;
    };
};

export type PostAgentsByAgentIdChatResponse = PostAgentsByAgentIdChatResponses[keyof PostAgentsByAgentIdChatResponses];

export type PostAgentsChatByIdMessageData = {
    body?: {
        input: string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/agents/chat/{id}/message';
};

export type PostAgentsChatByIdMessageResponses = {
    /**
     * Chat message received
     */
    200: {
        result: unknown;
    };
};

export type PostAgentsChatByIdMessageResponse = PostAgentsChatByIdMessageResponses[keyof PostAgentsChatByIdMessageResponses];

export type GetAgentsByAgentIdContextFilesData = {
    body?: never;
    path: {
        agentId: string;
    };
    query?: never;
    url: '/agents/{agentId}/context-files';
};

export type GetAgentsByAgentIdContextFilesResponses = {
    /**
     * Successful response
     */
    200: {
        files: Array<AgentContextFile>;
    };
};

export type GetAgentsByAgentIdContextFilesResponse = GetAgentsByAgentIdContextFilesResponses[keyof GetAgentsByAgentIdContextFilesResponses];

export type PostAgentsByAgentIdContextFilesData = {
    body?: {
        file: Blob | File;
    };
    path: {
        agentId: string;
    };
    query?: never;
    url: '/agents/{agentId}/context-files';
};

export type PostAgentsByAgentIdContextFilesResponses = {
    /**
     * Successful response
     */
    200: {
        file: AgentContextFile;
    };
};

export type PostAgentsByAgentIdContextFilesResponse = PostAgentsByAgentIdContextFilesResponses[keyof PostAgentsByAgentIdContextFilesResponses];

export type DeleteAgentsByAgentIdContextFilesByFileIdData = {
    body?: never;
    path: {
        agentId: string;
        fileId: string;
    };
    query?: never;
    url: '/agents/{agentId}/context-files/{fileId}';
};

export type DeleteAgentsByAgentIdContextFilesByFileIdResponses = {
    /**
     * Successful response
     */
    200: {
        success: boolean;
    };
};

export type DeleteAgentsByAgentIdContextFilesByFileIdResponse = DeleteAgentsByAgentIdContextFilesByFileIdResponses[keyof DeleteAgentsByAgentIdContextFilesByFileIdResponses];

export type GetAgentsByAgentIdContextFilesByFileIdData = {
    body?: never;
    path: {
        agentId: string;
        fileId: string;
    };
    query?: never;
    url: '/agents/{agentId}/context-files/{fileId}';
};

export type GetAgentsByAgentIdContextFilesByFileIdResponses = {
    /**
     * Successful response
     */
    200: {
        file: AgentContextFile;
    };
};

export type GetAgentsByAgentIdContextFilesByFileIdResponse = GetAgentsByAgentIdContextFilesByFileIdResponses[keyof GetAgentsByAgentIdContextFilesByFileIdResponses];

export type GetAgentsByAgentIdMcpServersData = {
    body?: never;
    path: {
        agentId: string;
    };
    query?: never;
    url: '/agents/{agentId}/mcp-servers';
};

export type GetAgentsByAgentIdMcpServersResponses = {
    /**
     * Successful response
     */
    200: {
        mcpServers: Array<TenantMcpServer>;
    };
};

export type GetAgentsByAgentIdMcpServersResponse = GetAgentsByAgentIdMcpServersResponses[keyof GetAgentsByAgentIdMcpServersResponses];

export type PostAgentsByAgentIdMcpServersData = {
    body?: {
        mcpServerId: number;
    };
    path: {
        agentId: string;
    };
    query?: never;
    url: '/agents/{agentId}/mcp-servers';
};

export type PostAgentsByAgentIdMcpServersResponses = {
    /**
     * Successful response
     */
    200: {
        success: boolean;
    };
};

export type PostAgentsByAgentIdMcpServersResponse = PostAgentsByAgentIdMcpServersResponses[keyof PostAgentsByAgentIdMcpServersResponses];

export type DeleteAgentsByAgentIdMcpServersByMcpServerIdData = {
    body?: never;
    path: {
        agentId: string;
        mcpServerId: string;
    };
    query?: never;
    url: '/agents/{agentId}/mcp-servers/{mcpServerId}';
};

export type DeleteAgentsByAgentIdMcpServersByMcpServerIdResponses = {
    /**
     * Successful response
     */
    200: {
        success: boolean;
    };
};

export type DeleteAgentsByAgentIdMcpServersByMcpServerIdResponse = DeleteAgentsByAgentIdMcpServersByMcpServerIdResponses[keyof DeleteAgentsByAgentIdMcpServersByMcpServerIdResponses];

export type GetAgentsByAgentIdRunsData = {
    body?: never;
    path: {
        agentId: string;
    };
    query?: never;
    url: '/agents/{agentId}/runs';
};

export type GetAgentsByAgentIdRunsResponses = {
    /**
     * Successful response
     */
    200: {
        runs: Array<AgentRun>;
    };
};

export type GetAgentsByAgentIdRunsResponse = GetAgentsByAgentIdRunsResponses[keyof GetAgentsByAgentIdRunsResponses];

export type PostAgentsByAgentIdRunsData = {
    body?: {
        customPrompt?: string;
        limitMcpServers?: Array<string>;
        limitTools?: Array<string>;
    };
    path: {
        agentId: string;
    };
    query?: never;
    url: '/agents/{agentId}/runs';
};

export type PostAgentsByAgentIdRunsResponses = {
    /**
     * Successful response
     */
    200: {
        runId: string;
    };
};

export type PostAgentsByAgentIdRunsResponse = PostAgentsByAgentIdRunsResponses[keyof PostAgentsByAgentIdRunsResponses];

export type GetAgentsByAgentIdRunsByRunIdData = {
    body?: never;
    path: {
        agentId: string;
        runId: string;
    };
    query?: never;
    url: '/agents/{agentId}/runs/{runId}';
};

export type GetAgentsByAgentIdRunsByRunIdResponses = {
    /**
     * Successful response
     */
    200: {
        run: AgentRun;
        usage: TenantUsage | null;
        toolCalls: Array<AgentRunToolCall>;
    };
};

export type GetAgentsByAgentIdRunsByRunIdResponse = GetAgentsByAgentIdRunsByRunIdResponses[keyof GetAgentsByAgentIdRunsByRunIdResponses];

export type GetTriggersData = {
    body?: never;
    path?: never;
    query?: {
        agentId?: string;
    };
    url: '/triggers';
};

export type GetTriggersResponses = {
    /**
     * Successful response
     */
    200: {
        triggers: Array<Trigger>;
    };
};

export type GetTriggersResponse = GetTriggersResponses[keyof GetTriggersResponses];

export type PostTriggersData = {
    body?: {
        name: string;
        type: 'webhook' | 'scheduled';
        configuration: TriggerWebhookConfiguration | TriggerScheduledConfiguration;
        isEnabled: boolean;
    };
    path?: never;
    query?: never;
    url: '/triggers';
};

export type PostTriggersResponses = {
    /**
     * Successful response
     */
    200: {
        trigger: Trigger;
    };
};

export type PostTriggersResponse = PostTriggersResponses[keyof PostTriggersResponses];

export type DeleteTriggersByTriggerIdData = {
    body?: never;
    path: {
        triggerId: string;
    };
    query?: never;
    url: '/triggers/{triggerId}';
};

export type DeleteTriggersByTriggerIdResponses = {
    /**
     * Successful response
     */
    200: {
        [key: string]: never;
    };
};

export type DeleteTriggersByTriggerIdResponse = DeleteTriggersByTriggerIdResponses[keyof DeleteTriggersByTriggerIdResponses];

export type GetTriggersByTriggerIdData = {
    body?: never;
    path: {
        triggerId: string;
    };
    query?: never;
    url: '/triggers/{triggerId}';
};

export type GetTriggersByTriggerIdResponses = {
    /**
     * Successful response
     */
    200: {
        trigger: Trigger;
        targets: Array<TriggerTarget>;
    };
};

export type GetTriggersByTriggerIdResponse = GetTriggersByTriggerIdResponses[keyof GetTriggersByTriggerIdResponses];

export type PutTriggersByTriggerIdData = {
    body?: {
        name: string;
        configuration: TriggerWebhookConfiguration | TriggerScheduledConfiguration;
        isEnabled: boolean;
    };
    path: {
        triggerId: string;
    };
    query?: never;
    url: '/triggers/{triggerId}';
};

export type PutTriggersByTriggerIdResponses = {
    /**
     * Successful response
     */
    200: {
        trigger: Trigger;
    };
};

export type PutTriggersByTriggerIdResponse = PutTriggersByTriggerIdResponses[keyof PutTriggersByTriggerIdResponses];

export type PostTriggersByTriggerIdInvokeData = {
    body?: never;
    path: {
        triggerId: string;
    };
    query?: never;
    url: '/triggers/{triggerId}/invoke';
};

export type PostTriggersByTriggerIdInvokeResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type PutTriggersByTriggerIdEnabledData = {
    body?: {
        isEnabled: boolean;
    };
    path: {
        triggerId: string;
    };
    query?: never;
    url: '/triggers/{triggerId}/enabled';
};

export type PutTriggersByTriggerIdEnabledResponses = {
    /**
     * Successful response
     */
    200: {
        isEnabled: boolean;
    };
};

export type PutTriggersByTriggerIdEnabledResponse = PutTriggersByTriggerIdEnabledResponses[keyof PutTriggersByTriggerIdEnabledResponses];

export type GetTriggersByTriggerIdInvocationsData = {
    body?: never;
    path: {
        triggerId: string;
    };
    query?: never;
    url: '/triggers/{triggerId}/invocations';
};

export type GetTriggersByTriggerIdInvocationsResponses = {
    /**
     * Successful response
     */
    200: {
        invocations: Array<TriggerInvocation>;
    };
};

export type GetTriggersByTriggerIdInvocationsResponse = GetTriggersByTriggerIdInvocationsResponses[keyof GetTriggersByTriggerIdInvocationsResponses];

export type GetTriggersByTriggerIdInvocationsByInvocationIdData = {
    body?: never;
    path: {
        triggerId: string;
        invocationId: string;
    };
    query?: never;
    url: '/triggers/{triggerId}/invocations/{invocationId}';
};

export type GetTriggersByTriggerIdInvocationsByInvocationIdResponses = {
    /**
     * Successful response
     */
    200: {
        invocation: TriggerInvocation;
    };
};

export type GetTriggersByTriggerIdInvocationsByInvocationIdResponse = GetTriggersByTriggerIdInvocationsByInvocationIdResponses[keyof GetTriggersByTriggerIdInvocationsByInvocationIdResponses];

export type GetTriggersByTriggerIdTargetsData = {
    body?: never;
    path: {
        triggerId: string;
    };
    query?: never;
    url: '/triggers/{triggerId}/targets';
};

export type GetTriggersByTriggerIdTargetsResponses = {
    /**
     * Successful response
     */
    200: {
        agentIds: Array<string>;
    };
};

export type GetTriggersByTriggerIdTargetsResponse = GetTriggersByTriggerIdTargetsResponses[keyof GetTriggersByTriggerIdTargetsResponses];

export type PostTriggersByTriggerIdTargetsData = {
    body?: {
        agentId: string;
    };
    path: {
        triggerId: string;
    };
    query?: never;
    url: '/triggers/{triggerId}/targets';
};

export type PostTriggersByTriggerIdTargetsResponses = {
    /**
     * Successful response
     */
    200: {
        agentIds: Array<string>;
    };
};

export type PostTriggersByTriggerIdTargetsResponse = PostTriggersByTriggerIdTargetsResponses[keyof PostTriggersByTriggerIdTargetsResponses];

export type DeleteTriggersByTriggerIdTargetsByAgentIdData = {
    body?: never;
    path: {
        triggerId: string;
        agentId: string;
    };
    query?: never;
    url: '/triggers/{triggerId}/targets/{agentId}';
};

export type DeleteTriggersByTriggerIdTargetsByAgentIdResponses = {
    /**
     * Successful response
     */
    200: {
        agentIds: Array<string>;
    };
};

export type DeleteTriggersByTriggerIdTargetsByAgentIdResponse = DeleteTriggersByTriggerIdTargetsByAgentIdResponses[keyof DeleteTriggersByTriggerIdTargetsByAgentIdResponses];

export type GetLlmApiKeysData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/llm-api-keys';
};

export type GetLlmApiKeysResponses = {
    /**
     * Successful response
     */
    200: {
        apiKeys: Array<TenantLlmKey>;
    };
};

export type GetLlmApiKeysResponse = GetLlmApiKeysResponses[keyof GetLlmApiKeysResponses];

export type PostLlmApiKeysData = {
    body?: {
        name: string;
        key: string;
        llmApiId: string;
        extra?: {
            [key: string]: string;
        };
    };
    path?: never;
    query?: never;
    url: '/llm-api-keys';
};

export type PostLlmApiKeysResponses = {
    /**
     * Successful response
     */
    200: {
        [key: string]: never;
    };
};

export type PostLlmApiKeysResponse = PostLlmApiKeysResponses[keyof PostLlmApiKeysResponses];

export type DeleteLlmApiKeysByKeyIdData = {
    body?: never;
    path: {
        keyId: string;
    };
    query?: never;
    url: '/llm-api-keys/{keyId}';
};

export type DeleteLlmApiKeysByKeyIdResponses = {
    /**
     * Successful response
     */
    200: {
        [key: string]: never;
    };
};

export type DeleteLlmApiKeysByKeyIdResponse = DeleteLlmApiKeysByKeyIdResponses[keyof DeleteLlmApiKeysByKeyIdResponses];

export type PutLlmApiKeysByKeyIdData = {
    body?: {
        name: string;
        key: string;
        extra?: {
            [key: string]: string;
        };
    };
    path: {
        keyId: string;
    };
    query?: never;
    url: '/llm-api-keys/{keyId}';
};

export type PutLlmApiKeysByKeyIdResponses = {
    /**
     * Successful response
     */
    200: {
        [key: string]: never;
    };
};

export type PutLlmApiKeysByKeyIdResponse = PutLlmApiKeysByKeyIdResponses[keyof PutLlmApiKeysByKeyIdResponses];

export type PutLlmApiKeysByKeyIdEnabledData = {
    body?: {
        isEnabled: boolean;
    };
    path: {
        keyId: string;
    };
    query?: never;
    url: '/llm-api-keys/{keyId}/enabled';
};

export type PutLlmApiKeysByKeyIdEnabledResponses = {
    /**
     * Successful response
     */
    200: {
        [key: string]: never;
    };
};

export type PutLlmApiKeysByKeyIdEnabledResponse = PutLlmApiKeysByKeyIdEnabledResponses[keyof PutLlmApiKeysByKeyIdEnabledResponses];

export type PostPlaygroundConvertTokenData = {
    body?: {
        id: string;
        displayName: string;
        email: string;
        firstName: string;
        lastName: string;
    };
    path?: never;
    query?: never;
    url: '/playground/convert-token';
};

export type PostPlaygroundConvertTokenResponses = {
    /**
     * Successful response
     */
    200: {
        token: string;
    };
};

export type PostPlaygroundConvertTokenResponse = PostPlaygroundConvertTokenResponses[keyof PostPlaygroundConvertTokenResponses];

export type GetUsageData = {
    body?: never;
    path?: never;
    query?: {
        page?: string;
        limit?: string;
        type?: 'AgentRun' | 'FreeCredit' | 'PaidCredit' | 'McpToolCall';
        startDate?: string;
        endDate?: string;
        /**
         * JSON encoded string of { [key: string]: string | boolean | number }. Only records whose meta object matches this structure will be returned.
         */
        meta?: string;
    };
    url: '/usage';
};

export type GetUsageResponses = {
    /**
     * Successful response
     */
    200: {
        data: Array<TenantUsage>;
        pagination: {
            page: number;
            limit: number;
            total: number;
            totalPages: number;
            hasNext: boolean;
            hasPrev: boolean;
        };
    };
};

export type GetUsageResponse = GetUsageResponses[keyof GetUsageResponses];

export type GetUsageAggregationData = {
    body?: never;
    path?: never;
    query: {
        periodStart: string;
        periodEnd: string;
    };
    url: '/usage/aggregation';
};

export type GetUsageAggregationResponses = {
    /**
     * Successful response
     */
    200: UsageAggregationResponse;
};

export type GetUsageAggregationResponse = GetUsageAggregationResponses[keyof GetUsageAggregationResponses];

export type GetUsageByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/usage/{id}';
};

export type GetUsageByIdResponses = {
    /**
     * Successful response
     */
    200: {
        usage: TenantUsage;
    };
};

export type GetUsageByIdResponse = GetUsageByIdResponses[keyof GetUsageByIdResponses];

export type PostCreditsPurchaseData = {
    body?: PurchaseCreditsRequest;
    path?: never;
    query?: never;
    url: '/credits/purchase';
};

export type PostCreditsPurchaseResponses = {
    /**
     * Successful response
     */
    200: {
        checkoutUrl: string;
        sessionId: string;
    };
};

export type PostCreditsPurchaseResponse = PostCreditsPurchaseResponses[keyof PostCreditsPurchaseResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}/api/v1` | (string & {});
};
