// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client/index.js';
import type { PostAuthNativeLoginData, PostAuthNativeLoginResponses, GetAuthMeData, GetAuthMeResponses, PostUsersRequestSetPasswordData, PostUsersRequestSetPasswordResponses, PostUsersByUserSubSetPasswordData, PostUsersByUserSubSetPasswordResponses, GetUsersMeData, GetUsersMeResponses, GetUsersData, GetUsersResponses, PostUsersData, PostUsersResponses, DeleteUsersByUserIdData, DeleteUsersByUserIdResponses, GetUsersByUserIdData, GetUsersByUserIdResponses, PutUsersByUserIdData, PutUsersByUserIdResponses, GetUsersByUserIdPermissionsData, GetUsersByUserIdPermissionsResponses, PostUsersByUserIdPermissionsData, PostUsersByUserIdPermissionsResponses, DeleteUsersByUserIdPermissionsByServerIdData, DeleteUsersByUserIdPermissionsByServerIdResponses, GetMcpServersData, GetMcpServersResponses, PostMcpServersData, PostMcpServersResponses, DeleteMcpServersByServerIdData, DeleteMcpServersByServerIdResponses, GetMcpServersByServerIdData, GetMcpServersByServerIdResponses, PutMcpServersByServerIdData, PutMcpServersByServerIdResponses, GetMcpServersByServerIdRunningStatusData, GetMcpServersByServerIdRunningStatusResponses, PostMcpServersByServerIdStartData, PostMcpServersByServerIdStartResponses, PutMcpServersByServerIdIsEnabledData, PutMcpServersByServerIdIsEnabledResponses, GetMcpServersByServerIdLogsData, GetMcpServersByServerIdLogsResponses, GetMcpServersByServerIdToolsData, GetMcpServersByServerIdToolsResponses, GetMcpServersByServerIdToolsByToolNameData, GetMcpServersByServerIdToolsByToolNameResponses, PutMcpServersByServerIdAllToolsIsEnabledData, PutMcpServersByServerIdAllToolsIsEnabledResponses, PutMcpServersByServerIdToolsByToolNameIsEnabledData, PutMcpServersByServerIdToolsByToolNameIsEnabledResponses, PostMcpServersByServerIdToolsByToolNameCallData, PostMcpServersByServerIdToolsByToolNameCallResponses, PostSignupData, PostSignupResponses, GetTenantsByTenantIdSigninMethodsData, GetTenantsByTenantIdSigninMethodsResponses, GetTenantsData, GetTenantsResponses, DeleteTenantsByTenantIdData, DeleteTenantsByTenantIdResponses, GetTenantsByTenantIdData, GetTenantsByTenantIdResponses, PutTenantsByTenantIdData, PutTenantsByTenantIdResponses, GetTenantsByTenantIdSubscriptionData, GetTenantsByTenantIdSubscriptionResponses, PutTenantsByTenantIdIsMcpAuthorizationApiKeyEnabledData, PutTenantsByTenantIdIsMcpAuthorizationApiKeyEnabledResponses, GetTenantsByTenantIdDiscoverSamlMetadataData, GetTenantsByTenantIdDiscoverSamlMetadataResponses, GetTenantSamlMetadataData, GetTenantSamlMetadataResponses, GetQuotaAndUsageData, GetQuotaAndUsageResponses, GetAgentsLlmApisData, GetAgentsLlmApisResponses, GetAgentsLlmModelsData, GetAgentsLlmModelsResponses, GetAgentsData, GetAgentsResponses, PostAgentsData, PostAgentsResponses, DeleteAgentsByAgentIdData, DeleteAgentsByAgentIdResponses, GetAgentsByAgentIdData, GetAgentsByAgentIdResponses, PutAgentsByAgentIdData, PutAgentsByAgentIdResponses, PutAgentsByAgentIdEnabledData, PutAgentsByAgentIdEnabledResponses, PostAgentsByAgentIdChatData, PostAgentsByAgentIdChatResponses, PostAgentsChatByIdMessageData, PostAgentsChatByIdMessageResponses, GetAgentsByAgentIdContextFilesData, GetAgentsByAgentIdContextFilesResponses, PostAgentsByAgentIdContextFilesData, PostAgentsByAgentIdContextFilesResponses, DeleteAgentsByAgentIdContextFilesByFileIdData, DeleteAgentsByAgentIdContextFilesByFileIdResponses, GetAgentsByAgentIdContextFilesByFileIdData, GetAgentsByAgentIdContextFilesByFileIdResponses, GetAgentsByAgentIdMcpServersData, GetAgentsByAgentIdMcpServersResponses, PostAgentsByAgentIdMcpServersData, PostAgentsByAgentIdMcpServersResponses, DeleteAgentsByAgentIdMcpServersByMcpServerIdData, DeleteAgentsByAgentIdMcpServersByMcpServerIdResponses, GetAgentsByAgentIdRunsData, GetAgentsByAgentIdRunsResponses, PostAgentsByAgentIdRunsData, PostAgentsByAgentIdRunsResponses, GetAgentsByAgentIdRunsByRunIdData, GetAgentsByAgentIdRunsByRunIdResponses, GetTriggersData, GetTriggersResponses, PostTriggersData, PostTriggersResponses, DeleteTriggersByTriggerIdData, DeleteTriggersByTriggerIdResponses, GetTriggersByTriggerIdData, GetTriggersByTriggerIdResponses, PutTriggersByTriggerIdData, PutTriggersByTriggerIdResponses, PostTriggersByTriggerIdInvokeData, PostTriggersByTriggerIdInvokeResponses, PutTriggersByTriggerIdEnabledData, PutTriggersByTriggerIdEnabledResponses, GetTriggersByTriggerIdInvocationsData, GetTriggersByTriggerIdInvocationsResponses, GetTriggersByTriggerIdInvocationsByInvocationIdData, GetTriggersByTriggerIdInvocationsByInvocationIdResponses, GetTriggersByTriggerIdTargetsData, GetTriggersByTriggerIdTargetsResponses, PostTriggersByTriggerIdTargetsData, PostTriggersByTriggerIdTargetsResponses, DeleteTriggersByTriggerIdTargetsByAgentIdData, DeleteTriggersByTriggerIdTargetsByAgentIdResponses, GetLlmApiKeysData, GetLlmApiKeysResponses, PostLlmApiKeysData, PostLlmApiKeysResponses, DeleteLlmApiKeysByKeyIdData, DeleteLlmApiKeysByKeyIdResponses, PutLlmApiKeysByKeyIdData, PutLlmApiKeysByKeyIdResponses, PutLlmApiKeysByKeyIdEnabledData, PutLlmApiKeysByKeyIdEnabledResponses, PostPlaygroundConvertTokenData, PostPlaygroundConvertTokenResponses, GetUsageData, GetUsageResponses, GetUsageAggregationData, GetUsageAggregationResponses, GetUsageByIdData, GetUsageByIdResponses, PostCreditsPurchaseData, PostCreditsPurchaseResponses, GetHostedFunctionsData, GetHostedFunctionsResponses, PostHostedFunctionsData, PostHostedFunctionsResponses, GetHostedFunctionsByFunctionIdData, GetHostedFunctionsByFunctionIdResponses, PutHostedFunctionsByFunctionIdData, PutHostedFunctionsByFunctionIdResponses, PostHostedFunctionsByFunctionIdStartData, PostHostedFunctionsByFunctionIdStartResponses, GetHostedFunctionsByFunctionIdDownloadData, GetHostedFunctionsByFunctionIdDownloadResponses, PostHostedFunctionsByFunctionIdUploadData, PostHostedFunctionsByFunctionIdUploadResponses, GetHostedFunctionsByFunctionIdToolsData, GetHostedFunctionsByFunctionIdToolsResponses, GetDeploymentsStatusData, GetDeploymentsStatusResponses, GetDeploymentsLogsData, GetDeploymentsLogsResponses, GetDeploymentsDeploymentLogsData, GetDeploymentsDeploymentLogsResponses } from './types.gen.js';
import { client as _heyApiClient } from './client.gen.js';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const postAuthNativeLogin = <ThrowOnError extends boolean = false>(options?: Options<PostAuthNativeLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAuthNativeLoginResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/native-login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getAuthMe = <ThrowOnError extends boolean = false>(options?: Options<GetAuthMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAuthMeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/me',
        ...options
    });
};

export const postUsersRequestSetPassword = <ThrowOnError extends boolean = false>(options: Options<PostUsersRequestSetPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUsersRequestSetPasswordResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/request-set-password',
        ...options
    });
};

export const postUsersByUserSubSetPassword = <ThrowOnError extends boolean = false>(options: Options<PostUsersByUserSubSetPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUsersByUserSubSetPasswordResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{userSub}/set-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getUsersMe = <ThrowOnError extends boolean = false>(options?: Options<GetUsersMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersMeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options
    });
};

export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options
    });
};

export const postUsers = <ThrowOnError extends boolean = false>(options?: Options<PostUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUsersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteUsersByUserId = <ThrowOnError extends boolean = false>(options: Options<DeleteUsersByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUsersByUserIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{userId}',
        ...options
    });
};

export const getUsersByUserId = <ThrowOnError extends boolean = false>(options: Options<GetUsersByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUsersByUserIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{userId}',
        ...options
    });
};

export const putUsersByUserId = <ThrowOnError extends boolean = false>(options: Options<PutUsersByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutUsersByUserIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{userId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getUsersByUserIdPermissions = <ThrowOnError extends boolean = false>(options: Options<GetUsersByUserIdPermissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUsersByUserIdPermissionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{userId}/permissions',
        ...options
    });
};

export const postUsersByUserIdPermissions = <ThrowOnError extends boolean = false>(options: Options<PostUsersByUserIdPermissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUsersByUserIdPermissionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{userId}/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteUsersByUserIdPermissionsByServerId = <ThrowOnError extends boolean = false>(options: Options<DeleteUsersByUserIdPermissionsByServerIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUsersByUserIdPermissionsByServerIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{userId}/permissions/{serverId}',
        ...options
    });
};

export const getMcpServers = <ThrowOnError extends boolean = false>(options?: Options<GetMcpServersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMcpServersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mcp-servers',
        ...options
    });
};

export const postMcpServers = <ThrowOnError extends boolean = false>(options?: Options<PostMcpServersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMcpServersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mcp-servers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteMcpServersByServerId = <ThrowOnError extends boolean = false>(options: Options<DeleteMcpServersByServerIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMcpServersByServerIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mcp-servers/{serverId}',
        ...options
    });
};

export const getMcpServersByServerId = <ThrowOnError extends boolean = false>(options: Options<GetMcpServersByServerIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMcpServersByServerIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mcp-servers/{serverId}',
        ...options
    });
};

export const putMcpServersByServerId = <ThrowOnError extends boolean = false>(options: Options<PutMcpServersByServerIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMcpServersByServerIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mcp-servers/{serverId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getMcpServersByServerIdRunningStatus = <ThrowOnError extends boolean = false>(options: Options<GetMcpServersByServerIdRunningStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMcpServersByServerIdRunningStatusResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mcp-servers/{serverId}/running-status',
        ...options
    });
};

/**
 * Starts a stopped MCP server. Only usable if the server has transport type "stdio".
 */
export const postMcpServersByServerIdStart = <ThrowOnError extends boolean = false>(options: Options<PostMcpServersByServerIdStartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostMcpServersByServerIdStartResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mcp-servers/{serverId}/start',
        ...options
    });
};

export const putMcpServersByServerIdIsEnabled = <ThrowOnError extends boolean = false>(options: Options<PutMcpServersByServerIdIsEnabledData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMcpServersByServerIdIsEnabledResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mcp-servers/{serverId}/isEnabled',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getMcpServersByServerIdLogs = <ThrowOnError extends boolean = false>(options: Options<GetMcpServersByServerIdLogsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMcpServersByServerIdLogsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mcp-servers/{serverId}/logs',
        ...options
    });
};

export const getMcpServersByServerIdTools = <ThrowOnError extends boolean = false>(options: Options<GetMcpServersByServerIdToolsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMcpServersByServerIdToolsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mcp-servers/{serverId}/tools',
        ...options
    });
};

export const getMcpServersByServerIdToolsByToolName = <ThrowOnError extends boolean = false>(options: Options<GetMcpServersByServerIdToolsByToolNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMcpServersByServerIdToolsByToolNameResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mcp-servers/{serverId}/tools/{toolName}',
        ...options
    });
};

export const putMcpServersByServerIdAllToolsIsEnabled = <ThrowOnError extends boolean = false>(options: Options<PutMcpServersByServerIdAllToolsIsEnabledData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMcpServersByServerIdAllToolsIsEnabledResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mcp-servers/{serverId}/all-tools-isEnabled',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const putMcpServersByServerIdToolsByToolNameIsEnabled = <ThrowOnError extends boolean = false>(options: Options<PutMcpServersByServerIdToolsByToolNameIsEnabledData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMcpServersByServerIdToolsByToolNameIsEnabledResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mcp-servers/{serverId}/tools/{toolName}/isEnabled',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postMcpServersByServerIdToolsByToolNameCall = <ThrowOnError extends boolean = false>(options: Options<PostMcpServersByServerIdToolsByToolNameCallData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostMcpServersByServerIdToolsByToolNameCallResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mcp-servers/{serverId}/tools/{toolName}/call',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postSignup = <ThrowOnError extends boolean = false>(options?: Options<PostSignupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostSignupResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getTenantsByTenantIdSigninMethods = <ThrowOnError extends boolean = false>(options: Options<GetTenantsByTenantIdSigninMethodsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTenantsByTenantIdSigninMethodsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tenants/{tenantId}/signin-methods',
        ...options
    });
};

export const getTenants = <ThrowOnError extends boolean = false>(options?: Options<GetTenantsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTenantsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tenants',
        ...options
    });
};

export const deleteTenantsByTenantId = <ThrowOnError extends boolean = false>(options: Options<DeleteTenantsByTenantIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTenantsByTenantIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tenants/{tenantId}',
        ...options
    });
};

export const getTenantsByTenantId = <ThrowOnError extends boolean = false>(options: Options<GetTenantsByTenantIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTenantsByTenantIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tenants/{tenantId}',
        ...options
    });
};

export const putTenantsByTenantId = <ThrowOnError extends boolean = false>(options: Options<PutTenantsByTenantIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutTenantsByTenantIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tenants/{tenantId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getTenantsByTenantIdSubscription = <ThrowOnError extends boolean = false>(options: Options<GetTenantsByTenantIdSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTenantsByTenantIdSubscriptionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tenants/{tenantId}/subscription',
        ...options
    });
};

export const putTenantsByTenantIdIsMcpAuthorizationApiKeyEnabled = <ThrowOnError extends boolean = false>(options: Options<PutTenantsByTenantIdIsMcpAuthorizationApiKeyEnabledData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutTenantsByTenantIdIsMcpAuthorizationApiKeyEnabledResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tenants/{tenantId}/is-mcp-authorization-api-key-enabled',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getTenantsByTenantIdDiscoverSamlMetadata = <ThrowOnError extends boolean = false>(options: Options<GetTenantsByTenantIdDiscoverSamlMetadataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTenantsByTenantIdDiscoverSamlMetadataResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tenants/{tenantId}/discover-saml-metadata',
        ...options
    });
};

export const getTenantSamlMetadata = <ThrowOnError extends boolean = false>(options?: Options<GetTenantSamlMetadataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTenantSamlMetadataResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tenant-saml-metadata',
        ...options
    });
};

export const getQuotaAndUsage = <ThrowOnError extends boolean = false>(options?: Options<GetQuotaAndUsageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetQuotaAndUsageResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/quota-and-usage',
        ...options
    });
};

export const getAgentsLlmApis = <ThrowOnError extends boolean = false>(options?: Options<GetAgentsLlmApisData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAgentsLlmApisResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents/llm-apis',
        ...options
    });
};

export const getAgentsLlmModels = <ThrowOnError extends boolean = false>(options?: Options<GetAgentsLlmModelsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAgentsLlmModelsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents/llm-models',
        ...options
    });
};

export const getAgents = <ThrowOnError extends boolean = false>(options?: Options<GetAgentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAgentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents',
        ...options
    });
};

export const postAgents = <ThrowOnError extends boolean = false>(options?: Options<PostAgentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAgentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteAgentsByAgentId = <ThrowOnError extends boolean = false>(options: Options<DeleteAgentsByAgentIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAgentsByAgentIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents/{agentId}',
        ...options
    });
};

export const getAgentsByAgentId = <ThrowOnError extends boolean = false>(options: Options<GetAgentsByAgentIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAgentsByAgentIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents/{agentId}',
        ...options
    });
};

export const putAgentsByAgentId = <ThrowOnError extends boolean = false>(options: Options<PutAgentsByAgentIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutAgentsByAgentIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents/{agentId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const putAgentsByAgentIdEnabled = <ThrowOnError extends boolean = false>(options: Options<PutAgentsByAgentIdEnabledData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutAgentsByAgentIdEnabledResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents/{agentId}/enabled',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postAgentsByAgentIdChat = <ThrowOnError extends boolean = false>(options: Options<PostAgentsByAgentIdChatData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAgentsByAgentIdChatResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents/{agentId}/chat',
        ...options
    });
};

export const postAgentsChatByIdMessage = <ThrowOnError extends boolean = false>(options: Options<PostAgentsChatByIdMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAgentsChatByIdMessageResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents/chat/{id}/message',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAgentsByAgentIdContextFiles = <ThrowOnError extends boolean = false>(options: Options<GetAgentsByAgentIdContextFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAgentsByAgentIdContextFilesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents/{agentId}/context-files',
        ...options
    });
};

export const postAgentsByAgentIdContextFiles = <ThrowOnError extends boolean = false>(options: Options<PostAgentsByAgentIdContextFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAgentsByAgentIdContextFilesResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents/{agentId}/context-files',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

export const deleteAgentsByAgentIdContextFilesByFileId = <ThrowOnError extends boolean = false>(options: Options<DeleteAgentsByAgentIdContextFilesByFileIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAgentsByAgentIdContextFilesByFileIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents/{agentId}/context-files/{fileId}',
        ...options
    });
};

export const getAgentsByAgentIdContextFilesByFileId = <ThrowOnError extends boolean = false>(options: Options<GetAgentsByAgentIdContextFilesByFileIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAgentsByAgentIdContextFilesByFileIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents/{agentId}/context-files/{fileId}',
        ...options
    });
};

export const getAgentsByAgentIdMcpServers = <ThrowOnError extends boolean = false>(options: Options<GetAgentsByAgentIdMcpServersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAgentsByAgentIdMcpServersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents/{agentId}/mcp-servers',
        ...options
    });
};

export const postAgentsByAgentIdMcpServers = <ThrowOnError extends boolean = false>(options: Options<PostAgentsByAgentIdMcpServersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAgentsByAgentIdMcpServersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents/{agentId}/mcp-servers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteAgentsByAgentIdMcpServersByMcpServerId = <ThrowOnError extends boolean = false>(options: Options<DeleteAgentsByAgentIdMcpServersByMcpServerIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAgentsByAgentIdMcpServersByMcpServerIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents/{agentId}/mcp-servers/{mcpServerId}',
        ...options
    });
};

export const getAgentsByAgentIdRuns = <ThrowOnError extends boolean = false>(options: Options<GetAgentsByAgentIdRunsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAgentsByAgentIdRunsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents/{agentId}/runs',
        ...options
    });
};

export const postAgentsByAgentIdRuns = <ThrowOnError extends boolean = false>(options: Options<PostAgentsByAgentIdRunsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAgentsByAgentIdRunsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents/{agentId}/runs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAgentsByAgentIdRunsByRunId = <ThrowOnError extends boolean = false>(options: Options<GetAgentsByAgentIdRunsByRunIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAgentsByAgentIdRunsByRunIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents/{agentId}/runs/{runId}',
        ...options
    });
};

export const getTriggers = <ThrowOnError extends boolean = false>(options?: Options<GetTriggersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTriggersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/triggers',
        ...options
    });
};

export const postTriggers = <ThrowOnError extends boolean = false>(options?: Options<PostTriggersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostTriggersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/triggers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteTriggersByTriggerId = <ThrowOnError extends boolean = false>(options: Options<DeleteTriggersByTriggerIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTriggersByTriggerIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/triggers/{triggerId}',
        ...options
    });
};

export const getTriggersByTriggerId = <ThrowOnError extends boolean = false>(options: Options<GetTriggersByTriggerIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTriggersByTriggerIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/triggers/{triggerId}',
        ...options
    });
};

export const putTriggersByTriggerId = <ThrowOnError extends boolean = false>(options: Options<PutTriggersByTriggerIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutTriggersByTriggerIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/triggers/{triggerId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postTriggersByTriggerIdInvoke = <ThrowOnError extends boolean = false>(options: Options<PostTriggersByTriggerIdInvokeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTriggersByTriggerIdInvokeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/triggers/{triggerId}/invoke',
        ...options
    });
};

export const putTriggersByTriggerIdEnabled = <ThrowOnError extends boolean = false>(options: Options<PutTriggersByTriggerIdEnabledData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutTriggersByTriggerIdEnabledResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/triggers/{triggerId}/enabled',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getTriggersByTriggerIdInvocations = <ThrowOnError extends boolean = false>(options: Options<GetTriggersByTriggerIdInvocationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTriggersByTriggerIdInvocationsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/triggers/{triggerId}/invocations',
        ...options
    });
};

export const getTriggersByTriggerIdInvocationsByInvocationId = <ThrowOnError extends boolean = false>(options: Options<GetTriggersByTriggerIdInvocationsByInvocationIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTriggersByTriggerIdInvocationsByInvocationIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/triggers/{triggerId}/invocations/{invocationId}',
        ...options
    });
};

export const getTriggersByTriggerIdTargets = <ThrowOnError extends boolean = false>(options: Options<GetTriggersByTriggerIdTargetsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTriggersByTriggerIdTargetsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/triggers/{triggerId}/targets',
        ...options
    });
};

export const postTriggersByTriggerIdTargets = <ThrowOnError extends boolean = false>(options: Options<PostTriggersByTriggerIdTargetsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTriggersByTriggerIdTargetsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/triggers/{triggerId}/targets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteTriggersByTriggerIdTargetsByAgentId = <ThrowOnError extends boolean = false>(options: Options<DeleteTriggersByTriggerIdTargetsByAgentIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTriggersByTriggerIdTargetsByAgentIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/triggers/{triggerId}/targets/{agentId}',
        ...options
    });
};

export const getLlmApiKeys = <ThrowOnError extends boolean = false>(options?: Options<GetLlmApiKeysData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLlmApiKeysResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/llm-api-keys',
        ...options
    });
};

export const postLlmApiKeys = <ThrowOnError extends boolean = false>(options?: Options<PostLlmApiKeysData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostLlmApiKeysResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/llm-api-keys',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteLlmApiKeysByKeyId = <ThrowOnError extends boolean = false>(options: Options<DeleteLlmApiKeysByKeyIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteLlmApiKeysByKeyIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/llm-api-keys/{keyId}',
        ...options
    });
};

export const putLlmApiKeysByKeyId = <ThrowOnError extends boolean = false>(options: Options<PutLlmApiKeysByKeyIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutLlmApiKeysByKeyIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/llm-api-keys/{keyId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const putLlmApiKeysByKeyIdEnabled = <ThrowOnError extends boolean = false>(options: Options<PutLlmApiKeysByKeyIdEnabledData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutLlmApiKeysByKeyIdEnabledResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/llm-api-keys/{keyId}/enabled',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postPlaygroundConvertToken = <ThrowOnError extends boolean = false>(options?: Options<PostPlaygroundConvertTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostPlaygroundConvertTokenResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/playground/convert-token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getUsage = <ThrowOnError extends boolean = false>(options?: Options<GetUsageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsageResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/usage',
        ...options
    });
};

export const getUsageAggregation = <ThrowOnError extends boolean = false>(options: Options<GetUsageAggregationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUsageAggregationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/usage/aggregation',
        ...options
    });
};

export const getUsageById = <ThrowOnError extends boolean = false>(options: Options<GetUsageByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUsageByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/usage/{id}',
        ...options
    });
};

export const postCreditsPurchase = <ThrowOnError extends boolean = false>(options?: Options<PostCreditsPurchaseData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostCreditsPurchaseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/credits/purchase',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getHostedFunctions = <ThrowOnError extends boolean = false>(options?: Options<GetHostedFunctionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHostedFunctionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/hosted-functions',
        ...options
    });
};

export const postHostedFunctions = <ThrowOnError extends boolean = false>(options?: Options<PostHostedFunctionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostHostedFunctionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/hosted-functions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getHostedFunctionsByFunctionId = <ThrowOnError extends boolean = false>(options: Options<GetHostedFunctionsByFunctionIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetHostedFunctionsByFunctionIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/hosted-functions/{functionId}',
        ...options
    });
};

export const putHostedFunctionsByFunctionId = <ThrowOnError extends boolean = false>(options: Options<PutHostedFunctionsByFunctionIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutHostedFunctionsByFunctionIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/hosted-functions/{functionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postHostedFunctionsByFunctionIdStart = <ThrowOnError extends boolean = false>(options: Options<PostHostedFunctionsByFunctionIdStartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostHostedFunctionsByFunctionIdStartResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/hosted-functions/{functionId}/start',
        ...options
    });
};

export const getHostedFunctionsByFunctionIdDownload = <ThrowOnError extends boolean = false>(options: Options<GetHostedFunctionsByFunctionIdDownloadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetHostedFunctionsByFunctionIdDownloadResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/hosted-functions/{functionId}/download',
        ...options
    });
};

export const postHostedFunctionsByFunctionIdUpload = <ThrowOnError extends boolean = false>(options: Options<PostHostedFunctionsByFunctionIdUploadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostHostedFunctionsByFunctionIdUploadResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/hosted-functions/{functionId}/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

export const getHostedFunctionsByFunctionIdTools = <ThrowOnError extends boolean = false>(options: Options<GetHostedFunctionsByFunctionIdToolsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetHostedFunctionsByFunctionIdToolsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/hosted-functions/{functionId}/tools',
        ...options
    });
};

export const getDeploymentsStatus = <ThrowOnError extends boolean = false>(options?: Options<GetDeploymentsStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDeploymentsStatusResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/deployments/status',
        ...options
    });
};

export const getDeploymentsLogs = <ThrowOnError extends boolean = false>(options: Options<GetDeploymentsLogsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDeploymentsLogsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/deployments/logs',
        ...options
    });
};

export const getDeploymentsDeploymentLogs = <ThrowOnError extends boolean = false>(options?: Options<GetDeploymentsDeploymentLogsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDeploymentsDeploymentLogsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/deployments/deployment-logs',
        ...options
    });
};